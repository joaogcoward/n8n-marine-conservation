{
  "name": "Marine Conservation Intelligence Hub",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 8
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -464,
        224
      ],
      "id": "16eb50a4-f314-4beb-8d01-b765fdcc69a2",
      "name": "Schedule Trigger",
      "notes": "Initiates the workflow daily."
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze the following news article and provide a JSON response with two boolean properties: `isTrustworthy` and `isRelevant`. Also, include the `correlation_id` from the original article in the response.\n\nThe `isTrustworthy` property should be true if the article appears to be from a reputable source, has no sensational or misleading claims, and uses credible language.\n\nThe `isRelevant` property should be true if the article is about marine conservation.\n\nYour output must be a raw JSON object with no additional text or explanations.\n\nArticle Title: {{ $json.title }}\nArticle Description: {{ $json.description }}\nArticle Content: {{ $json.content }}\nCorrelation ID: {{ $json.correlation_id }}\n\nExample Output:\n{\n  \"isTrustworthy\": true,\n  \"isRelevant\": true,\n  \"correlation_id\": \"article_0\"\n}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1680,
        -336
      ],
      "id": "7d32ec7c-d567-4620-824e-ba2a80922676",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "projectId": {
          "__rl": true,
          "value": "gen-lang-client-0563035104",
          "mode": "list",
          "cachedResultName": "Gemini API"
        },
        "modelName": "gemini-2.5-flash-lite",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleVertex",
      "typeVersion": 1,
      "position": [
        1680,
        -160
      ],
      "id": "8c91b3e1-13ea-469a-a606-d1380fbda626",
      "name": "Google Vertex Chat Model",
      "credentials": {
        "googleApi": {
          "id": "GLJnxUhspkFiUw5v",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const allAIItems = $items();\nconst allParsedItems = [];\n\nfor (const item of allAIItems) {\n  const aiResponseString = item.json.output;\n\n  if (typeof aiResponseString !== 'string' || aiResponseString.trim() === '') {\n    continue;\n  }\n  const jsonMatch = aiResponseString.match(/{[\\s\\S]*}/);\n  if (!jsonMatch) {\n    continue;\n  }\n  const cleanedJsonString = jsonMatch[0];\n  try {\n    const parsedJson = JSON.parse(cleanedJsonString);\n    allParsedItems.push(parsedJson);\n  } catch (error) {\n    continue;\n  }\n}\n\nreturn allParsedItems;\n\nreturn allParsedItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        -336
      ],
      "id": "60f263e3-7e80-414d-b1c9-1068e8a1a89f",
      "name": "Parsing the AI's Output"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "correlation_id",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2208,
        -48
      ],
      "id": "6104d111-51d2-41a3-92b7-85a1d64e41cf",
      "name": "Merging the Data",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "const filteredArticles = [];\n\nfor (const item of items) {\n  const isTrustworthy = item.json.isTrustworthy;\n  const isRelevant = item.json.isRelevant;\n\n  if (isTrustworthy === true && isRelevant === true) {\n    filteredArticles.push(item);\n  }\n}\n\nreturn filteredArticles;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2384,
        -48
      ],
      "id": "fda93113-96ed-4437-bce9-c62a8a786516",
      "name": "Filtering relevant articles",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "notes": "unction: This custom code node filters the articles based on the isTrustworthy and isRelevant boolean values assigned by the AI.\n\nInput: A list of articles, each with isTrustworthy and isRelevant properties.\n\nLogic: It iterates through the list and only returns items where both isTrustworthy === true and isRelevant === true. It also includes a check to handle and discard any empty JSON objects that might be passed from previous nodes.\n\nOutput: A list of filtered, relevant articles. Returns a blank list [] if no articles meet the criteria."
    },
    {
      "parameters": {
        "jsCode": "const articles = $input.all();\n\nreturn articles.map((article, index) => {\n  return {\n    json: {\n      ...article.json,\n      \"correlation_id\": `article_${index}`\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1440,
        -64
      ],
      "id": "582ba874-a4f1-463a-8a81-a8f50c30cb52",
      "name": "Correlation ID Assignment",
      "notes": "This step ensures we can correctly match AI analysis results back to their original articles later."
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1AyKorvx1rWEn-mxjFUxul3PzGpYrG3n6njGeWJ11vjs",
          "mode": "list",
          "cachedResultName": "articles",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1AyKorvx1rWEn-mxjFUxul3PzGpYrG3n6njGeWJ11vjs/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 2088665949,
          "mode": "list",
          "cachedResultName": "analyzed articles",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1AyKorvx1rWEn-mxjFUxul3PzGpYrG3n6njGeWJ11vjs/edit#gid=2088665949"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "articleUrl": "={{ $json.url }}",
            "sentTimestamp": "={{ new Date().toISOString().split('T')[0] }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "articleUrl",
              "displayName": "articleUrl",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "sentTimestamp",
              "displayName": "sentTimestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        3264,
        -336
      ],
      "id": "467210e5-76b3-410e-8cf2-705a51f5e1a2",
      "name": "Archiving digested articles",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "lAC401kk6C5AHOli",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const report = [];\n\n// Start with an emotional greeting from our bot persona\nreport.push(\"Ahoy, team! ⚓️\");\nreport.push(`I've just finished my daily dive for marine and ocean news. Here are my top findings for today, ${new Date().toISOString().split('T')[0]}.`);\nreport.push(\"\\n\");\n\n// Filter the items to only include new articles.\nconst newArticles = items.filter(item => {\n    // Check if the item has a source with a name or a creator property\n    const hasSource = item.json.source && item.json.source.name;\n    const hasCreator = item.json.creator;\n    const hasUrl = item.json.url || item.json.link;\n\n    return (hasSource || hasCreator) && hasUrl;\n});\n\n\n// Check if there are any new articles to report\nif (newArticles.length === 0) {\n    report.push('My scans came up empty today. It seems there were no new articles that met our standards for trustworthiness and relevance.');\n} else {\n    // Sort the items by a source name for a clean, organized report\n    const sortedItems = newArticles.sort((a, b) => {\n        const sourceNameA = (a.json.source && a.json.source.name) || 'Mongabay';\n        const sourceNameB = (b.json.source && b.json.source.name) || 'Mongabay';\n        return sourceNameA.localeCompare(sourceNameB);\n    });\n\n    // Create a report with the sorted articles\n    for (const item of sortedItems) {\n        // Dynamically get the source name\n        let sourceName = (item.json.source && item.json.source.name) || 'Mongabay';\n        \n        // Handle different data structures for URL\n        const url = item.json.url || item.json.link;\n\n        // Add the article details to the report, only including the name with the hyperlink\n        report.push(`*From ${sourceName}*`);\n        report.push(`*<${url}|${item.json.title}>*`);\n        report.push(\"\\n\");\n    }\n}\n\n// Combine the report array into a single string\nconst slackMessage = report.join('\\n');\n\n// Return a single object with the message text\nreturn [{\n    json: {\n        text: slackMessage\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2928,
        -256
      ],
      "id": "fc1d6616-1833-4fad-bba6-83587131c5fa",
      "name": "Slack Report"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "mode": "id",
          "value": "C09B69V4R1V"
        },
        "text": "={{ $json.text }}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        3264,
        -64
      ],
      "id": "b20c4693-c803-41f1-8a9b-14f710682529",
      "name": "Send a message",
      "webhookId": "66422287-4173-4fa5-a75f-77119d5e6996",
      "credentials": {
        "slackApi": {
          "id": "KpIZzJkOEPMi3Y72",
          "name": "Slack account 2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0a74b0da-31ef-4280-98f4-020e1e5d3444",
              "leftValue": "={{ $items(\"Remove Duplicates\").length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1200,
        48
      ],
      "id": "2bc2afed-8a62-4198-82af-0802fa7c4373",
      "name": "If"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        704,
        -32
      ],
      "id": "79cdca14-05c1-4870-b9ab-71d9eb855ef5",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// This function takes an array of items and processes them.\nconst processItems = (items) => {\n    const combinedArticles = [];\n    if (items) {\n        for (const item of items) {\n            // Check for the News API structure\n            if (item.json.articles) {\n                combinedArticles.push(...item.json.articles);\n            }\n            // Check for the Guardian API structure\n            else if (item.json.response) {\n                combinedArticles.push(...item.json.response.results);\n            }\n            // Check for the RSS Feed structure\n            else if (item.json.link) {\n                const rssItem = {\n                    ...item.json,\n                    url: item.json.link\n                };\n                combinedArticles.push(rssItem);\n            }\n        }\n    }\n    return combinedArticles;\n};\n\n// This is the code that is actually executed.\nconst allInputs = $input.all();\nconst normalizedData = processItems(allInputs);\n\nreturn normalizedData;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        864,
        -16
      ],
      "id": "856ec77d-be9f-48bc-af3f-7f7c2bdcd278",
      "name": "Normalizer"
    },
    {
      "parameters": {
        "operation": "removeItemsSeenInPreviousExecutions",
        "dedupeValue": "={{ $json.url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        1008,
        -16
      ],
      "id": "cb81ee63-3fc3-47a8-aabd-d041379fc2cb",
      "name": "Remove Duplicates"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "mode": "id",
          "value": "C09B69V4R1V"
        },
        "text": "=Ahoy! My daily scan found no new articles today that met our criteria. I'll check again tomorrow!",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        2960,
        224
      ],
      "id": "f9282d25-8e58-486e-b3ae-3914be4bd6df",
      "name": "Slack Report - No New Article",
      "webhookId": "66422287-4173-4fa5-a75f-77119d5e6996",
      "credentials": {
        "slackApi": {
          "id": "KpIZzJkOEPMi3Y72",
          "name": "Slack account 2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0a7f2e1b-ddd5-42f6-9bcb-bdf104dfc27a",
              "leftValue": "={{ $items(\"Filtering relevant articles\").length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            },
            {
              "id": "37c8743b-f636-4089-b0aa-7e19301b0b58",
              "leftValue": "={{ Object.keys($json).length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2656,
        80
      ],
      "id": "feec2875-65ed-4e1c-99fe-fbff3edfc2b1",
      "name": "If - Relevant Articles"
    },
    {
      "parameters": {
        "height": 1536,
        "width": 1904,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -672,
        -512
      ],
      "typeVersion": 1,
      "id": "9f0ceffd-507c-4711-a69f-d7b9af658c43",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "",
        "height": 1536,
        "width": 1328,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1232,
        -512
      ],
      "typeVersion": 1,
      "id": "02e815c5-f00e-4fa7-8726-7ec37d2f9a3a",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "",
        "height": 1536,
        "width": 1008,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2560,
        -512
      ],
      "typeVersion": 1,
      "id": "5fde294c-3778-4050-90b3-5847a346455b",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "# **Marine News Digest Automation**\n\n## This workflow automates the process of finding, filtering, and reporting on relevant news articles from multiple sources. It runs on a schedule, uses AI to analyze articles for relevance and trustworthiness, and either archives them or sends a report if no new articles are found.",
        "height": 416,
        "width": 432,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -672,
        -512
      ],
      "typeVersion": 1,
      "id": "5286e090-2d4d-41d9-b559-1831878d5eab",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "# **Data Ingestion & Deduplication**\n## This section is responsible for gathering the desired article from multiple sources, standardizing their data, and removing any duplicates before further analysis.",
        "width": 800,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -16,
        496
      ],
      "typeVersion": 1,
      "id": "d2827dfc-0584-49ee-9133-cfcc7e0b6604",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "url": " https://newsapi.org/v2/everything",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "\"coral reefs\" OR \"ocean wildlife\" OR \"ocean extinction\" OR \"marine conservation\""
            },
            {
              "name": "apiKey",
              "value": "2842e67e11ca47bf952e7116a902b8e5"
            },
            {
              "name": "sortBy",
              "value": "relevancy"
            },
            {
              "name": "language",
              "value": "en"
            },
            {
              "name": "pageSize",
              "value": "50"
            },
            {
              "name": "from",
              "value": "={{ $json.startDate }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        96,
        -176
      ],
      "id": "e6d8f8e0-6f10-4fc9-bc2c-a485241c7448",
      "name": "HTTP Request - News API"
    },
    {
      "parameters": {
        "url": "https://content.guardianapis.com/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "8410d84d-1161-4e23-930a-2af23388cebd"
            },
            {
              "name": "q",
              "value": "\"coral reefs\" OR \"ocean wildlife\""
            },
            {
              "name": "section",
              "value": "environment"
            },
            {
              "name": "tag",
              "value": "environment/marine-life"
            },
            {
              "name": "from-date",
              "value": "={{ $json.startDate }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        96,
        16
      ],
      "id": "b09fa7cf-bb5e-47df-92b5-23beb3954dfd",
      "name": "HTTP Request - The Guardian API"
    },
    {
      "parameters": {
        "url": "https://news.mongabay.com/feed/",
        "options": {
          "customFields": ""
        }
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        96,
        256
      ],
      "id": "213fa125-64e9-4869-80ae-3898321d37fd",
      "name": "RSS Read - Mongabay"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4eff8b47-f13d-4626-b3ac-dc075bff51a5",
              "leftValue": "={{ new Date($json.pubDate).getTime() }}",
              "rightValue": "={{ new Date().getTime() - (24 * 60 * 60 * 1000) }}",
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        288,
        256
      ],
      "id": "f0f1846c-ca06-4407-8e61-d9d3daf7509f",
      "name": "Filtering - Publication Date"
    },
    {
      "parameters": {
        "jsCode": "// Get today's date\nconst today = new Date();\n\n// Get the yesterday date\nconst yesterday = new Date();\nyesterday.setDate(today.getDate() - 1);\n\n// Format dates as YYYY-MM-DD for API compatibility\nconst formatDate = (date) => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};\n\n// Return the start date for the query\nreturn [\n  {\n    json: {\n      startDate: formatDate(yesterday)\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -192,
        16
      ],
      "id": "94f08843-2268-4791-976c-09ccecfeef80",
      "name": "Set startDate for HTTP Requests"
    },
    {
      "parameters": {
        "content": "# **AI-Powered Article Analysis**\n## This section leverages AI to evaluate the articles for relevance and trustworthiness, and then filters them based on the AI's output.",
        "width": 800,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1472,
        480
      ],
      "typeVersion": 1,
      "id": "6517fc3f-416c-416e-9c23-5077d82c7dab",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "content": "# **Final Action & Reporting**\n## This is the final stage of the workflow. It uses a conditional check to determine whether to archive the articles or send a report.",
        "width": 800
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2656,
        464
      ],
      "typeVersion": 1,
      "id": "b0deb2af-ef04-49b8-9141-90e53c6d4a00",
      "name": "Sticky Note9"
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Set startDate for HTTP Requests",
            "type": "main",
            "index": 0
          },
          {
            "node": "RSS Read - Mongabay",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Vertex Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Parsing the AI's Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parsing the AI's Output": {
      "main": [
        [
          {
            "node": "Merging the Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merging the Data": {
      "main": [
        [
          {
            "node": "Filtering relevant articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Correlation ID Assignment": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merging the Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filtering relevant articles": {
      "main": [
        [
          {
            "node": "If - Relevant Articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Archiving digested articles": {
      "main": [
        []
      ]
    },
    "Slack Report": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          },
          {
            "node": "Archiving digested articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Normalizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalizer": {
      "main": [
        [
          {
            "node": "Remove Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicates": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Correlation ID Assignment",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Slack Report - No New Article",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If - Relevant Articles": {
      "main": [
        [
          {
            "node": "Slack Report",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Slack Report - No New Article",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - News API": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - The Guardian API": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "RSS Read - Mongabay": {
      "main": [
        [
          {
            "node": "Filtering - Publication Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filtering - Publication Date": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Set startDate for HTTP Requests": {
      "main": [
        [
          {
            "node": "HTTP Request - The Guardian API",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request - News API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "45a4b902-b703-4a86-bdef-1ac231ee0c9b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "54a744b141db732434672e7115ceedac423eccaf9fb4261bc6abb827b92408a5"
  },
  "id": "K0iPGK7FgALw30rr",
  "tags": [
    {
      "createdAt": "2025-08-24T17:19:22.647Z",
      "updatedAt": "2025-08-24T17:19:22.647Z",
      "id": "Wpp9HnGB2mmWXePv",
      "name": "n8n Problem-Solving for"
    }
  ]
}